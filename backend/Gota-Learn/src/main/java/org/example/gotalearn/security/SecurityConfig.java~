package org.example.gotalearn.security;


import ch.qos.logback.core.pattern.color.BoldCyanCompositeConverter;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;

import java.util.List;

@Configuration
@RequiredArgsConstructor
public class SecurityConfig {
    private final UserDetailsService userDetailsService;
    @Bean
    public PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }
    @Bean
    public AuthenticationManager
    authenticationManager(AuthenticationConfiguration config)
            throws Exception {
        return config.getAuthenticationManager();
    }
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http)
        throws Exception{
        http.httpBasic(Customizer.withDefaults());
        http.csrf(c -> c.disable());
        http.cors(c ->{
            CorsConfigurationSource source=new CorsConfigurationSource() {
                @Override
                public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {
                    CorsConfiguration config=new CorsConfiguration();
                    config.setAllowedOrigins(List.of("http://localhost:"));
                    config.setAllowedMethods("*");
                    config.setAllowedHeaders("*");
                    return config;
                }
            };
            c.configurationSource(source);
        });
        http.authorizeHttpRequests(c -> {
            c.requestMatchers("/api/auth/**").permitAll();
            c.anyRequest().authenticated();
        });
        return http.build();
    }
}
